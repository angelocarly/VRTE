#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 16
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout (binding = 0, rgba8) uniform image2D resultImage;

layout(push_constant) uniform constants
{
    int mWidth;
    int mHeight;
    float mTScale;
    int mPadding;
    vec4 mA;
    vec4 mB;
    vec4 mC;
    vec4 mD;
} PushConstants;

vec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

void main()
{
    // Terminate unnecessary workgroup threads
    if (gl_GlobalInvocationID.x >= PushConstants.mWidth || gl_GlobalInvocationID.y >= PushConstants.mHeight )
    return;

    // Camera setup
    float x = float(gl_GlobalInvocationID.x) / float( PushConstants.mWidth );
    float y = float(gl_GlobalInvocationID.y) / float( PushConstants.mHeight );

    vec2 uv = vec2(x, y);// * 2.0 - 1.0;
    uv.x *= PushConstants.mWidth / float( PushConstants.mHeight );

//    vec3 color = pal( PushConstants.mValue + uv.x + uv.y, vec3(0.8 * PushConstants.mValue2,0.5 * PushConstants.mValue2,0.4),vec3(0.2,0.4 * PushConstants.mValue2,0.2),vec3(2.0 * PushConstants.mValue2,1.0,1.0),vec3(0.0,0.25,0.25) );

    float t = length( uv - vec2( .5 ) );
    vec3 color = pal( t * PushConstants.mTScale, PushConstants.mA.rgb, PushConstants.mB.rgb, PushConstants.mC.rgb, PushConstants.mD.rgb );

    imageStore( resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1) );
}