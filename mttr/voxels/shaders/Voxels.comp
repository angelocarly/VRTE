#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 8
layout ( local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = WORKGROUP_SIZE ) in;

#define WORLD_SIZE 128
layout ( binding = 0 ) buffer InWorldDataBlock
{
    vec4 mWorldData[ WORLD_SIZE * WORLD_SIZE * WORLD_SIZE ];
} inWorldData;

layout ( binding = 1 ) buffer OutWorldDataBlock
{
    vec4 mWorldData[ WORLD_SIZE * WORLD_SIZE * WORLD_SIZE ];
} outWorldData;

layout(push_constant) uniform PushConstantsBlock
{
    float mTime;
} PushConstants;

float random(vec3 st) {
    return fract(sin(dot(st.xyz,
    vec3(12.9898,78.233,39.847)))*
    43758.5453123 + PushConstants.mTime );
}

vec4 read( uint x, uint y, uint z )
{
    uint index = x * WORLD_SIZE * WORLD_SIZE + y * WORLD_SIZE + z;
    return inWorldData.mWorldData[ index ];
}

void write( uint x, uint y, uint z, vec4 value )
{
    uint index = x * WORLD_SIZE * WORLD_SIZE + y * WORLD_SIZE + z;
    outWorldData.mWorldData[ index ] = value;
}

float sdf( vec4 p )
{
    return length( p ) - 0.3f;
}

struct ray_result
{
    vec3 position;
    float distance;
    bool hit;
};
ray_result cast_ray( vec4 origin, vec4 direction )
{
    ray_result result;

    float t = 0.0f;
    for( int i = 0; i < 100; i++ )
    {
        float d = sdf( origin + direction * t );

        t += d;

        if( d < 0.0001f )
        {
            result.hit = true;
            result.position = vec3( origin + direction * t );
            result.distance = t;
            return result;
        }
    }

    result.hit = false;
    return result;
}

void d4( uint x, uint y, uint z )
{
    float t = 0;
    vec4 origin = vec4( x, y, z, 0 ) / float( WORLD_SIZE ) - vec4( .5f );
    vec4 direction = vec4( 0, 0, 0, 1 );
    ray_result result = cast_ray( origin, direction );
    if( result.hit )
    {
        write( x, y, z, vec4( 1 ) );
    }
    else
    {
        write( x, y, z, vec4( 0 ) );
    }
}

void main()
{
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;
    uint z = gl_GlobalInvocationID.z;

    // If we're out of bounds, just return
    if( x >= WORLD_SIZE || y >= WORLD_SIZE || z >= WORLD_SIZE )
    {
        return;
    }

//    automata( x, y, z );
    d4( x, y, z );
}
