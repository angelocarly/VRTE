#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 16
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout (binding = 0, rgba8) uniform image2D inImage;
layout (binding = 1, rgba8) uniform image2D outImage;

layout(push_constant) uniform constants
{
    int mWidth;
    int mHeight;
} PushConstants;

float convolution[9] = float[9](
    2.0f, -1.0f, 2.0f,
    2.0f, -1.0f, 2.0f,
    2.0f, -1.0f, 2.0f
);

void main()
{
    // Terminate unnecessary workgroup threads
    if (gl_GlobalInvocationID.x >= PushConstants.mWidth || gl_GlobalInvocationID.y >= PushConstants.mHeight )
    return;

    // Camera setup
    float x = float(gl_GlobalInvocationID.x) / float( PushConstants.mWidth );
    float y = float(gl_GlobalInvocationID.y) / float( PushConstants.mHeight );

    vec2 uv = vec2(x, y);// * 2.0 - 1.0;
    uv.x *= PushConstants.mWidth / float( PushConstants.mHeight );

    vec3 sum = vec3( 0 );
    for( int i = 0; i < 3; i++ ) for( int j = 0; j < 3; j++ )
    {
        sum += imageLoad( inImage, ivec2( gl_GlobalInvocationID.xy ) + ivec2( i - 1, j - 1 ) ).rgb * convolution[i * 3 + j];
    }
    sum /= 9.0f;

//    vec3 color = ( vec3(sin( x * 100.0f ), sin( y * 100.0f ), 1) + 1) / 2.0f * imgin;
    imageStore( outImage, ivec2(gl_GlobalInvocationID.xy), vec4(sum, 1) );
}