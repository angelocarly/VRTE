#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 16

layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout( push_constant ) uniform constants
{
    int mInvocationCount;
    float mTime;
    bool mReset;
} PushConstants;

layout (std430, set = 0, binding = 0 ) buffer OutVertexData {
    vec4[] vertices;
} outVertexData;

layout (std430, set = 0, binding = 1 ) buffer OutIndexData {
    int[] indices;
} outIndexData;

float randFloat( vec2 co )
{
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

vec3 randVec3( float seed )
{
    vec3 rand = vec3( 0 );
    rand.x = randFloat( vec2( seed, seed ) );
    rand.y = randFloat( vec2( rand.x * seed, seed ) );
    rand.z = randFloat( vec2( rand.y * seed, seed ) );
    return rand;
}

void main()
{
    if( gl_GlobalInvocationID.x >= PushConstants.mInvocationCount ) return;
    int instanceId = int( floor( gl_GlobalInvocationID.x ) );
    int verticesPerInstance = 8;
    int indicesPerInstance = 16;
    int outVertexId = verticesPerInstance * instanceId;
    int outIndexId = indicesPerInstance * instanceId;

    vec3 pos = vec3( instanceId % 64, 0, floor( instanceId / 64 ) );
    if( PushConstants.mReset ) pos = randVec3( instanceId + PushConstants.mTime ) * 100.f;

    float scale = .1f;

    outVertexData.vertices[ outVertexId + 0 ] = vec4( pos + vec3( -scale, 0, -scale), 1.f );
    outVertexData.vertices[ outVertexId + 1 ] = vec4( pos + vec3( -scale, 0, scale ), 1.f );
    outVertexData.vertices[ outVertexId + 2 ] = vec4( pos + vec3( scale, 0, scale ), 1.f );
    outVertexData.vertices[ outVertexId + 3 ] = vec4( pos + vec3( scale, 0, -scale), 1.f );

    outVertexData.vertices[ outVertexId + 4 ] = vec4( pos + vec3( -scale, scale, -scale ), 1.f );
    outVertexData.vertices[ outVertexId + 5 ] = vec4( pos + vec3( -scale, scale, scale ), 1.f );
    outVertexData.vertices[ outVertexId + 6 ] = vec4( pos + vec3( scale, scale, scale ), 1.f );
    outVertexData.vertices[ outVertexId + 7 ] = vec4( pos + vec3( scale, scale, -scale ), 1.f );

    outIndexData.indices[ outIndexId + 0 ] = outVertexId + 0;
    outIndexData.indices[ outIndexId + 1 ] = outVertexId + 1;
    outIndexData.indices[ outIndexId + 2 ] = outVertexId + 1;
    outIndexData.indices[ outIndexId + 3 ] = outVertexId + 2;
    outIndexData.indices[ outIndexId + 4 ] = outVertexId + 2;
    outIndexData.indices[ outIndexId + 5 ] = outVertexId + 3;
    outIndexData.indices[ outIndexId + 6 ] = outVertexId + 3;
    outIndexData.indices[ outIndexId + 7 ] = outVertexId + 0;

    outIndexData.indices[ outIndexId + 8 ] = outVertexId + 4;
    outIndexData.indices[ outIndexId + 9 ] = outVertexId + 5;
    outIndexData.indices[ outIndexId + 10 ] = outVertexId + 5;
    outIndexData.indices[ outIndexId + 11 ] = outVertexId + 6;
    outIndexData.indices[ outIndexId + 12 ] = outVertexId + 6;
    outIndexData.indices[ outIndexId + 13 ] = outVertexId + 7;
    outIndexData.indices[ outIndexId + 14 ] = outVertexId + 7;
    outIndexData.indices[ outIndexId + 15 ] = outVertexId + 4;

}
